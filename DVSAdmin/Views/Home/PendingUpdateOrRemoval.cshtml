@using DVSAdmin.CommonUtility.Models
@using DVSAdmin.Extensions
@model DVSAdmin.Models.Home.PendingListViewModel
@{
    ViewData["Title"] = "PendingUpdateOrRemoval";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}

<div class="govuk-width-container">
    <main id="main-content" class="govuk-main-wrapper" role="main">
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                <h1 class="govuk-heading-xl govuk-!-margin-bottom-5">Open Tasks</h1>
                <p class="govuk-body">
                    Update, or remove, information about services or service providers.
                </p>
            </div>
            <div class="govuk-grid-column-full">
                @await Html.PartialAsync("~/Views/Home/PartialViews/_PendingCountView.cshtml", Model.OpenTaskCount)
                <div class="govuk-form-group" style="border: 1px solid #b1b4b6; padding: 20px; padding-bottom: 0px; margin-top: 20px;">
                    <table class="govuk-table govuk-table--small-text-until-tablet">
                        <caption class="govuk-table__caption govuk-table__caption--m govuk-!-margin-bottom-5">
                            Update and removal requests pending
                            <span class="govuk-visually-hidden">column headers with links are sortable</span>
                        </caption>
                        <thead class="govuk-table__head">
                            <tr class="govuk-table__row sortable-table">
                                <th scope="col" class="govuk-table__header" aria-sort="@((Model.CurrentSort == "service name") ? Model.CurrentSortAction : "none")"
                                    aria-label="sort by service name">
                                    <a href="@Url.Action("PendingUpdateOrRemoval", "Home", new { CurrentSort = Model.CurrentSort, CurrentSortAction = Model.CurrentSortAction, NewSort = "service name" })">
                                        <b>Service name</b>
                                    </a>
                                </th>
                                <th scope="col" class="govuk-table__header" aria-sort="@((Model.CurrentSort == "provider") ? Model.CurrentSortAction : "none")"
                                    aria-label="sort by provider name">
                                    <a href="@Url.Action("PendingUpdateOrRemoval", "Home", new { CurrentSort = Model.CurrentSort, CurrentSortAction = Model.CurrentSortAction, NewSort = "provider" })">
                                        <b>Service provider</b>
                                    </a>
                                </th>
                                <th scope="col" class="govuk-table__header" aria-sort="@((Model.CurrentSort == "status") ? Model.CurrentSortAction : "none")"
                                    aria-label="sort by service status">
                                    <a href="@Url.Action("PendingUpdateOrRemoval", "Home", new { CurrentSort = Model.CurrentSort, CurrentSortAction = Model.CurrentSortAction, NewSort = "status" })">
                                        <b>Removal<br />status</b>
                                    </a>
                                </th>
                                <th scope="col" class="govuk-table__header" aria-sort="@((Model.CurrentSort == "application") ? Model.CurrentSortAction : "none")"
                                    aria-label="sort by application version, new or reapplication">
                                    <a href="@Url.Action("PendingUpdateOrRemoval", "Home", new { CurrentSort = Model.CurrentSort, CurrentSortAction = Model.CurrentSortAction, NewSort = "application" })">
                                        <b>New application<br />or reapplication</b>
                                    </a>
                                </th>
                            </tr>
                        </thead>
                        <tbody class="govuk-table__body">
                            @if (Model?.PendingRequests != null && Model.PendingRequests.Count > 0)
                            {
                                foreach (var item in Model.PendingRequests)
                                {                                   
                                    <tr class="govuk-table__row">
                                        @if (item.ServiceStatus == ServiceStatusEnum.CabAwaitingRemovalConfirmation)
                                        {
                                            <td class="govuk-table__cell">
                                                @Html.ActionLink(item.ServiceName, "ProviderDetails", "RegisterManagement", new { providerId = item.ProviderProfileId }, new { @class = "govuk-link" })
                                            </td>
                                        }
                                        else
                                        {
                                            <td class="govuk-table__cell">@item.ServiceName</td>
                                        }
                                        <td class="govuk-table__cell">@item.Provider.RegisteredName</td>
                                        <td class="govuk-table__cell">@HtmlExtensions.ToStyledStrongTag(item.ServiceStatus)</td>
                                        <td class="govuk-table__cell">@item.NewOrResubmission</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr class="govuk-table__row">
                                    <td class="govuk-table__cell" colspan="4">
                                        <p class="govuk-body"><b>Showing 0 results</b></p>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @if (Model?.TotalPages > 1)
                    {
                        PaginationViewModel paginationViewModel = new PaginationViewModel
                        {
                            Action = "PendingUpdateOrRemoval",
                            CurrentPage = ViewBag.CurrentPage,
                            TotalPages = Model.TotalPages,
                            Sort = Model.CurrentSort,
                            SortAction = Model.CurrentSortAction
                        };

                        @await Html.PartialAsync("~/Views/PartialViews/_PaginationView.cshtml", paginationViewModel)
                    }

                </div>

            </div>
        </div>
    </main>
</div>





