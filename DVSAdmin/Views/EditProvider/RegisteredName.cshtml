@model ProfileSummaryViewModel
@{
    ViewData["Title"] = "RegisteredName";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}

@{
    bool hasError = false;
}
@using (Html.BeginForm("SaveRegisteredName", "EditProvider", FormMethod.Post))
{
    @Html.HiddenFor(m=>m.ProviderProfileId)
    <div class="govuk-width-container">     
        <a href="@((Convert.ToBoolean(ViewBag.fromSummaryPage)) ? Url.Action("ProfileSummary", "EditProvider", new { providerId = Model.ProviderProfileId }) : Url.Action("ProfileSummary", "EditProvider", new { providerId = Model.ProviderProfileId, isEditPage = true }))" class = "govuk-back-link" >Back</a>

        <main id="main-content" class="govuk-main-wrapper" role="main">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">

                    @if (Html.ViewData?.ModelState.ContainsKey("RegisteredName") == true)
                    {
                        var errors = Html.ViewData?.ModelState["RegisteredName"]?.Errors;
                        if (errors != null && errors.Count > 0)
                        {
                            hasError = true;
                            ViewData["Title"] = "Error: " + ViewData["Title"];
                            @await Html.PartialAsync("~/Views/PartialViews/_SpecificErrorsView.cshtml",
                                     new Tuple<string, IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>>("RegisteredName", errors))
                        }
                    }

                    <h1 class="govuk-heading-xl">The digital identity and attribute service provider’s registered company name</h1>
                    <p class="govuk-body">The provider's registered company name will be publicly displayed on the register of digital identity and attribute services. This should match the registered name on the certificate of conformity.</p>
                    <p class="govuk-body">To make changes, type the new information and select ‘Save’. If there are no changes to make, select ‘Cancel’.</p>

                    @{
                        var registeredNameViewmodel = new TextBoxViewModel
                    {
                        PropertyName = "RegisteredName",
                        Label = "Registered company name",
                        Value = Model?.RegisteredName ?? string.Empty,
                        Class = "govuk-input",
                        HasError = hasError,
                        ErrorMessage = hasError ? Html.ViewData?.ModelState["RegisteredName"]?.Errors[0].ErrorMessage ?? string.Empty : string.Empty,
                    };
                    }

                    @await Html.PartialAsync("~/Views/PartialViews/_TextBoxView.cshtml", registeredNameViewmodel)
                    <div class="govuk-warning-text">
                        <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                        <strong class="govuk-warning-text__text">
                            <span class="govuk-visually-hidden">Warning</span>
                            If you select ‘Save’ your changes will need to be approved by another OfDIA user. Do not select ‘Save’ unless you have made changes.
                        </strong>
                    </div>
                    <div class="govuk-button-group">
                        <button type="submit" class="govuk-button" data-module="govuk-button" name="action">
                            Save
                        </button>
                        <a href="@((Convert.ToBoolean(ViewBag.fromSummaryPage)) ? Url.Action("ProfileSummary", "EditProvider", new { providerId = Model.ProviderProfileId }) : Url.Action("ProfileSummary", "EditProvider", new { providerId = Model.ProviderProfileId, isEditPage = true }))" class="govuk-button govuk-button--secondary" role="button">Cancel</a>
                        
                    </div>
                </div>
            </div>
        </main>
    </div>
}

