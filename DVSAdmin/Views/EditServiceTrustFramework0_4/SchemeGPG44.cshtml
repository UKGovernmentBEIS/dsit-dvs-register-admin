@model DVSAdmin.Models.QualityLevelViewModel
@{
    ViewData["Title"] = "Right to work: quality of authentication and quality of protection (GPG 44)";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}

@{
    bool hasAuthenticatorError = false;
    bool hasProtectionError = false;
    int authIndex = 0;
    int levelIndex = 0;

}

@using (Html.BeginForm("SaveSchemeGPG44", "TrustFramework0_4", FormMethod.Post))
{
    @Html.HiddenFor(m => m.FromSummaryPage)
    @Html.HiddenFor(m => m.SchemeId)
    @Html.HiddenFor(m => m.SchemeName)
    <div class="govuk-width-container">
        <a href="@((Model.FromSummaryPage) ? Url.Action("ServiceSummary", "EditService") : Url.Action("ServiceDetails", "RegisterManagement", new { serviceKey = Model.ServiceKey }))" class="govuk-back-link">Back</a>
        <main id="main-content" class="govuk-main-wrapper" role="main">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">

                    @if (ViewData.ModelState.ErrorCount > 0)
                    {
                        @if (Html.ViewData?.ModelState.ContainsKey("SelectedQualityofAuthenticatorIds") == true && Html.ViewData.ModelState["SelectedQualityofAuthenticatorIds"].Errors.Count > 0)
                        {
                            hasAuthenticatorError = true;
                        }

                        @if (Html.ViewData?.ModelState.ContainsKey("SelectedLevelOfProtectionIds") == true && Html.ViewData.ModelState["SelectedLevelOfProtectionIds"].Errors.Count > 0)
                        {
                            hasProtectionError = true;
                        }

                        ViewData["Title"] = "Error: " + ViewData["Title"];
                        @await Html.PartialAsync("~/Views/PartialViews/_ErrorSummaryView.cshtml", Model)
                    }

                    <h1 class="govuk-heading-xl">
                        @Model.SchemeName: quality of authentication and quality of protection (GPG 44)
                    </h1>

                    <p class="govuk-body">
                        To make changes, type the new information and select 'Save'. If there are no changes to make, select 'cancel.'
                    </p>


                    @if (hasAuthenticatorError)
                    {
                        <div class="govuk-form-group govuk-form-group--error">
                            <fieldset class="govuk-fieldset" aria-describedby="selectedqualityofauthenticatorids-error">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">

                                    Quality of authenticator

                                </legend>

                                <p id="selectedqualityofauthenticatorids-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.SelectedQualityofAuthenticatorIds, "", new { @class = "govuk-error-message" })
                                </p>
                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                                    @foreach (var authenticator in Model.AvailableQualityOfAuthenticators)
                                    {
                                        var idSuffix = authIndex > 0 ? $"_{authIndex}" : string.Empty; // added to make the first checkbox id as selectedqualityofauthenticatorids so that error summary ahref refers first item
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input" type="checkbox" name="SelectedQualityofAuthenticatorIds" value="@authenticator.Id"
                                                   id="selectedqualityofauthenticatorids@(idSuffix)"
                                            @(Model.SelectedQualityofAuthenticatorIds.Contains(authenticator.Id) ? "checked" : "") />
                                            <label class="govuk-label govuk-checkboxes__label" for="selectedqualityofauthenticatorids@(idSuffix)">@authenticator.Level</label>
                                        </div>
                                        authIndex++;
                                    }
                                </div>

                            </fieldset>
                        </div>
                    }
                    else
                    {
                        <div class="govuk-form-group">
                            <fieldset class="govuk-fieldset">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">

                                    Quality of authenticator

                                </legend>

                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                                    @foreach (var authenticator in Model.AvailableQualityOfAuthenticators)
                                    {
                                        var idSuffix = authIndex > 0 ? $"_{authIndex}" : string.Empty;
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input" type="checkbox" name="SelectedQualityofAuthenticatorIds" value="@authenticator.Id"
                                                   id="selectedqualityofauthenticatorids@(idSuffix)"
                                            @(Model.SelectedQualityofAuthenticatorIds.Contains(authenticator.Id) ? "checked" : "") />
                                            <label class="govuk-label govuk-checkboxes__label" for="selectedqualityofauthenticatorids@(idSuffix)">@authenticator.Level</label>
                                        </div>
                                        authIndex++;
                                    }
                                </div>

                            </fieldset>
                        </div>
                    }
                    <hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

                    @if (hasProtectionError)
                    {
                        <div class="govuk-form-group govuk-form-group--error">
                            <fieldset class="govuk-fieldset" aria-describedby="selectedlevelofprotectionids-error">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                                    Level of protection
                                </legend>

                                <p id="selectedlevelofprotectionids-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.SelectedLevelOfProtectionIds, "", new { @class = "govuk-error-message" })
                                </p>
                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                                    @foreach (var level in Model.AvailableLevelOfProtections)
                                    {
                                        var idSuffix = levelIndex > 0 ? $"_{levelIndex}" : string.Empty;
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input" type="checkbox" name="SelectedLevelOfProtectionIds" value="@level.Id"
                                                   id="selectedlevelofprotectionids@(idSuffix)"
                                            @(Model.SelectedLevelOfProtectionIds.Contains(level.Id) ? "checked" : "") />
                                            <label class="govuk-label govuk-checkboxes__label" for="selectedlevelofprotectionids@(idSuffix)">@level.Level</label>
                                        </div>
                                        levelIndex++;
                                    }
                                </div>

                            </fieldset>
                        </div>
                    }
                    else
                    {
                        <div class="govuk-form-group">
                            <fieldset class="govuk-fieldset">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                                    Level of protection
                                </legend>

                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                                    @foreach (var level in Model.AvailableLevelOfProtections)
                                    {
                                        var idSuffix = levelIndex > 0 ? $"_{levelIndex}" : string.Empty;

                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input" type="checkbox" name="SelectedLevelOfProtectionIds" value="@level.Id"
                                                   id="selectedlevelofprotectionids@(idSuffix)"
                                            @(Model.SelectedLevelOfProtectionIds.Contains(level.Id) ? "checked" : "") />
                                            <label class="govuk-label govuk-checkboxes__label" for="selectedlevelofprotectionids@(idSuffix)">@level.Level</label>
                                        </div>
                                        levelIndex++;
                                    }
                                </div>

                            </fieldset>
                        </div>
                    }

                    <div class="govuk-button-group">
                        <button type="submit" class="govuk-button govuk-!-margin-top-6" data-module="govuk-button">
                            Save
                        </button>
                        <a href="@((Model.FromSummaryPage) ? Url.Action( "ServiceSummary", "EditService") :
                        Url.Action("ServiceDetails", "RegisterManagement", new { serviceKey = Model.ServiceKey }))" class="govuk-button govuk-button--secondary" role="button">Cancel</a>
                    </div>
                </div>
            </div>
        </main>
    </div>
}

