@model DVSAdmin.Models.PaginationViewModel

@{

    int serviceKey = Convert.ToInt32(ViewData["ServiceKey"]);
    string tabAnchor = !string.IsNullOrEmpty(Model.TabName) ? $"{Model.TabName}" : "";
    var routeValues = new Dictionary<string, object>
    {      
        {"pageNumber" ,0},
        { "CurrentSort", Model.Sort },
        { "CurrentSortAction", Model.SortAction }
    };

    if (serviceKey != 0)
    {
        routeValues.Add("serviceKey", serviceKey);
    }

   
}



<nav class="govuk-pagination" aria-label="Pagination">
    <div class="govuk-pagination__prev">
        @if (Model.CurrentPage>1)
        {
            routeValues["pageNumber"] = Model.CurrentPage - 1;
            string url = Url.Action(Model.Action, routeValues) + tabAnchor;

            <a class="govuk-link govuk-pagination__link" href="@url" rel="prev">
                <svg class="govuk-pagination__icon govuk-pagination__icon--prev" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
                    <path d="m6.5938-0.0078125-6.7266 6.7266 6.7441 6.4062 1.377-1.449-4.1856-3.9768h12.896v-2h-12.984l4.2931-4.293-1.414-1.414z"></path>
                </svg>
                <span class="govuk-pagination__link-title">
                    Previous<span class="govuk-visually-hidden"> page</span>
                </span>
            </a>
        }
    </div>
    @{
    int total = Model.TotalPages;
    int current = Model.CurrentPage;
    var pagesToShow = new List<int>(); // what pages are being shown

    if (total <= 5)
    {
        for (int i = 1; i <= total; i++)
            pagesToShow.Add(i);
    }
    else
    {
        if (current < 4)
        {
            pagesToShow.AddRange(Enumerable.Range(1, 4));
            pagesToShow.Add(-1); // indicates ellipsis needed
            pagesToShow.Add(total);
        }
        else if (current > total - 3)
        {
            pagesToShow.Add(1);
            pagesToShow.Add(-1);
            pagesToShow.AddRange(Enumerable.Range(total - 3, 4));
        }
        else
        {
            pagesToShow.Add(1);
            pagesToShow.Add(-1);
            pagesToShow.AddRange(Enumerable.Range(current - 1, 3));
            pagesToShow.Add(-1);
            pagesToShow.Add(total);
        }
    }
}

<ul class="govuk-pagination__list">
    @foreach (var pageNum in pagesToShow)
    {
        if (pageNum == -1)
        {
            <li class="govuk-pagination__item govuk-pagination__item--ellipses">&ctdot;</li>
        }
        else
        {
                routeValues["pageNumber"] = pageNum;
                string url = Url.Action(Model.Action, routeValues) + tabAnchor;

            <li class="govuk-pagination__item @(pageNum == current ? "govuk-pagination__item--current" : "")">
                <a class="govuk-link govuk-pagination__link" 
                   href="@url" 
                   aria-label="Page @pageNum">@pageNum</a>
            </li>
        }
    }
</ul>
    <div class="govuk-pagination__next">
        @if (Model.CurrentPage < Model.TotalPages)
        {
            routeValues["pageNumber"] = Model.CurrentPage + 1;
            string url = Url.Action(Model.Action, routeValues) + tabAnchor;


            <a class="govuk-link govuk-pagination__link" href="@url" rel="next">
                <span class="govuk-pagination__link-title">
                    Next<span class="govuk-visually-hidden"> page</span>
                </span>
                <svg class="govuk-pagination__icon govuk-pagination__icon--next" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
                    <path d="m8.107-0.0078125-1.4136 1.414 4.2926 4.293h-12.986v2h12.896l-4.1855 3.9766 1.377 1.4492 6.7441-6.4062-6.7246-6.7266z"></path>
                </svg>
            </a>
        }
    </div>
</nav>