@model PasswordTextBoxViewModel

@{
    string elementId = @Model.PropertyName.ToLower();
    string hintId = @elementId + "-hint";
    string errorId = @elementId + "-error";
    string ariaDescribedbyValue = "";
    if (Model.HasError && !string.IsNullOrEmpty(Model.Hint))
    {
        ariaDescribedbyValue = hintId + " " + errorId;
    }
    else if (Model.HasError)
    {
        ariaDescribedbyValue = errorId;
    }
    else if (!string.IsNullOrEmpty(Model.Hint))
    {
        ariaDescribedbyValue = hintId;
    }
}

<div data-module="@(Model.hasShowPassword ? "govuk-password-input" : "")" class="govuk-form-group govuk-password-input @(Model.HasError ? "govuk-form-group--error" : "")">
    <label class="govuk-label govuk-label--s" for="@elementId">
        @Model.Label
    </label>

    @if (!string.IsNullOrEmpty(Model.Hint))
    {
        <div id="@hintId" class="govuk-hint">
            @Model.Hint
        </div>
    }

    @if (Model.HasError)
    {
        <p id="@errorId" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> @Model.ErrorMessage
        </p>
    }


    @if (Model.HasError || !string.IsNullOrEmpty(Model.Hint))
    {
        <div class="govuk-input__wrapper govuk-password-input__wrapper">
            @Html.Password(Model.PropertyName, Model.Value,
            new
                {
                    @id = @elementId,
                    @class = Model.HasError ? Model.Class + " govuk-input--error govuk-js-password-input-input" : Model.Class + " govuk-js-password-input-input",
                    spellcheck = false,
                    autocomplete = "current-password",
                    autocapitalize = "none",
                    aria_describedby = ariaDescribedbyValue
                }
            )
            @if (Model.hasShowPassword)
            {
                <button type="button" class="govuk-button govuk-button--secondary govuk-password-input__toggle govuk-js-password-input-toggle" data-module="govuk-button" aria-controls="@elementId" aria-label="Show password" hidden>
                    Show
                </button>
            }
        </div>
    }
    else
    {
        <div class="govuk-input__wrapper govuk-password-input__wrapper">
            @Html.Password(Model.PropertyName, Model.Value,
            new
                {
                    @id = @elementId,
                    @class = Model.HasError ? Model.Class + " govuk-input--error govuk-js-password-input-input" : Model.Class + " govuk-js-password-input-input",
                    spellcheck = false,
                    autocomplete = "current-password",
                    autocapitalize = "none",
                }
            )

            @if (Model.hasShowPassword)
            {
                <button type="button" class="govuk-button govuk-button--secondary govuk-password-input__toggle govuk-js-password-input-toggle" data-module="govuk-button" aria-controls="@elementId" aria-label="Show password" hidden>
                    Show
                </button>
            }
        </div>
    }

</div>