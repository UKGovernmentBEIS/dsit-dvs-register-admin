@model CertificateValidationViewModel;
@using DVSAdmin.CommonUtility
@using DVSAdmin.Extensions;
@using DVSAdmin.CommonUtility.Models.Enums;
@using Newtonsoft.Json
@using DVSAdmin.Models.UI
@{
    ViewData["Title"] = "Part 1 of 2: Certificate Validation";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";   
}



<div class="govuk-width-container">
    @Html.ActionLink("Back", "CertificateReviews", "CertificateReview", null, new { @class = "govuk-back-link" })
    <main id="main-content" class="govuk-main-wrapper" role="main">      

        <div class="govuk-grid-row">

            @if (Model?.Service?.IsResubmission == true)
            {
                var notificationBanner = new NotificationBannerViewModel
                {
                    Title = "Important",
                    NotificationContent = new List<NotificationContent> { new() { Heading = "This information has been provided as part of a reapplication, trust framework uplift or certification transfer from another CAB.",
                    HtmlContent = "<p class='govuk-body'><a href='#' class='govuk-link' rel='noreferrer noopener' target='_blank'>Access the original submission (opens in new tab)</a></p>"
                  } }
                };
                @await Html.PartialAsync("~/Views/PartialViews/_NotificationBanner.cshtml", notificationBanner)

            }
            @using (Html.BeginForm("SaveCertificateValidation", "CertificateReview", FormMethod.Post))
            {              
                @Html.HiddenFor(m => m.ServiceId)

                <div class="govuk-grid-column-full">

                    @if (ViewData.ModelState.ErrorCount > 0)
                    {
                        ViewData["Title"] = "Error: " + ViewData["Title"];
                        @await Html.PartialAsync("~/Views/PartialViews/_ErrorSummaryView.cshtml", Model)
                    }
                    <h1 class="govuk-heading-xl">Part 1 of 2: Certificate validation</h1>
                    @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_ServiceDetailsWithDaysLeftView.cshtml", Model.Service)
                </div>

                <div class="govuk-grid-column-two-thirds">
                    <h2 class="govuk-heading-l">Certificate validation</h2>
                    <p class="govuk-body">
                        Review the certificate submitted by the Conformity Assessment Body (CAB) to check whether it contains the correct information about the service and that it is consistent with certification scheme requirements.
                    </p>

                    <details class="govuk-details">
                        <summary class="govuk-details__summary">
                            <span class="govuk-details__summary-text">
                                Instructions for completing the certificate validation
                            </span>
                        </summary>
                        <div class="govuk-details__text">


                            <ol class="govuk-list govuk-list--number">
                                <li>
                                    Make sure that you have the service provider's certificate of conformity open. You can download the file
                                    again using the 'Download certificate of conformity' button on this page.
                                </li>
                                <li>
                                    Compare the information on the certificate against the statements on this page.
                                </li>
                                <li>
                                    For each category, pay attention to the individual items or entries to confirm their accuracy. If the statement is true, select 'Correct', and if the statement is false, select 'Incorrect'.
                                </li>
                                <li>
                                    If you wish to submit your review at a later time, you can select the ‘Save as draft’ button. You must have completed all sections before saving.
                                </li>
                                <li>
                                    Once you have verified all items, select the ‘Continue’ button to go to the 'Information match' page.
                                </li>
                            </ol>
                        </div>
                    </details>

                    <h3 class="govuk-heading-l">Provided certificate of conformity </h3>
                    <p class="govuk-body">
                        Download the certificate of conformity provided by the CAB to check that the certificate meets the requirements in the statements on this page.
                    </p>

                    <span class="govuk-caption-xl">@Model.Service.FileName</span>

                    <div id="download-certificate-hint" class="govuk-hint">
                        PDF, @Model.Service.FileSizeInKb KB, 1 page
                        This file may not be suitable for users of assistive technology.
                    </div>

                    <a href="/certificate-review/download-certificate?key=@Model.Service.FileLink&filename=@Model.Service.FileName" role="button" draggable="false" class="govuk-button govuk-button--secondary" data-module="govuk-button">

                        Download certificate of conformity
                    </a>

                    <hr class="govuk-section-break govuk-section-break--m">

                    <h3 class="govuk-heading-m">General</h3>
                    @* --------------Logos and certificate number ----------------- *@
                    <h4 class="govuk-heading-s">Logos and certificate number</h4>
                    <p class="govuk-body">The certificate contains the following:</p>
                    <ul class="govuk-list govuk-list--bullet govuk-list--spaced">
                        <li>
                            UKDIATF logo
                        </li>
                        <li>
                            CAB logo
                        </li>
                        <li>
                            certificate number or other unique identification
                        </li>
                        <li>
                            UKAS reference number of the CAB
                        </li>
                    </ul>

                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                       {
                       PropertyName = "IsCabLogoCorrect",
                       Value = Model.IsCabLogoCorrect,
                       Legend = "Logos and certificate number",
                       HasError = Html.ViewData.ModelState.ContainsKey("IsCabLogoCorrect") && Html.ViewData.ModelState["IsCabLogoCorrect"].Errors.Count > 0,
                       ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsCabLogoCorrect") && Html.ViewData.ModelState["IsCabLogoCorrect"].Errors.Count > 0 ?
                       Html.ViewData.ModelState["IsCabLogoCorrect"].Errors[0].ErrorMessage : string.Empty,
                       Label1 = "Correct",
                       Label2 = "Incorrect"
                       })



                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Conformity Assessment Body details ----------------- *@
                    <h4 class="govuk-heading-s">Conformity Assessment Body details</h4>
                    <p class="govuk-body">The certificate contains the following:</p>
                    <ul class="govuk-list govuk-list--bullet govuk-list--spaced">
                        <li>
                            name of the CAB
                        </li>
                        <li>
                            address of the CAB
                        </li>
                    </ul>

                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                    {
                        PropertyName = "IsCabDetailsCorrect",
                        Value = Model.IsCabDetailsCorrect,
                        Legend = "Conformity Assessment Body details",
                        HasError = Html.ViewData.ModelState.ContainsKey("IsCabDetailsCorrect") && Html.ViewData.ModelState["IsCabDetailsCorrect"].Errors.Count > 0,
                        ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsCabDetailsCorrect") && Html.ViewData.ModelState["IsCabDetailsCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsCabDetailsCorrect"].Errors[0].ErrorMessage : string.Empty,
                        Label1 = "Correct",
                        Label2 = "Incorrect"
                            })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Service provider details ----------------- *@
                    <h4 class="govuk-heading-s">Service provider details</h4>
                    <p class="govuk-body">The certificate contains the following:</p>
                    <ul class="govuk-list govuk-list--bullet govuk-list--spaced">
                        <li>
                            registered name of the service provider
                        </li>
                        <li>
                            trading name of the service provider, if applicable
                        </li>
                        <li>
                            address of the service provider
                        </li>
                    </ul>

                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                     {
                        PropertyName = "IsProviderDetailsCorrect",
                        Value = Model.IsProviderDetailsCorrect,
                        Legend = "Service provider details",
                        HasError = Html.ViewData.ModelState.ContainsKey("IsProviderDetailsCorrect") && Html.ViewData.ModelState["IsProviderDetailsCorrect"].Errors.Count > 0,
                        ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsProviderDetailsCorrect") && Html.ViewData.ModelState["IsProviderDetailsCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsProviderDetailsCorrect"].Errors[0].ErrorMessage : string.Empty,
                       Label1 = "Correct",
                       Label2 = "Incorrect"
                    })



                    <hr class="govuk-section-break govuk-section-break--m">

                    <h3 class="govuk-heading-m">Statement of conformity</h3>

                    @* --------------Name of service ----------------- *@
                    <h4 class="govuk-heading-s">Name of service and trust framework version</h4>
                    <p class="govuk-body">
                        The certificate states the name of the service, and version of the trust framework it is certified against.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                       PropertyName = "IsServiceNameCorrect",
                       Value = Model.IsServiceNameCorrect,
                       Legend = "Name of service",
                       HasError = Html.ViewData.ModelState.ContainsKey("IsServiceNameCorrect") && Html.ViewData.ModelState["IsServiceNameCorrect"].Errors.Count > 0,
                       ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsServiceNameCorrect") && Html.ViewData.ModelState["IsServiceNameCorrect"].Errors.Count > 0 ?
                       Html.ViewData.ModelState["IsServiceNameCorrect"].Errors[0].ErrorMessage : string.Empty,
                       Label1 = "Correct",
                       Label2 = "Incorrect"
                   })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Roles certified against----------------- *@
                    <h4 class="govuk-heading-s">Roles certified against</h4>
                    <p class="govuk-body">
                        The certificate contains a statement of conformity which includes the roles certified against, and details of whether this is an 
                        underpinning or white-labelled service.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                       PropertyName = "IsRolesCertifiedCorrect",
                       Value = Model.IsRolesCertifiedCorrect,
                       Legend = "Roles certified against",
                       HasError = Html.ViewData.ModelState.ContainsKey("IsRolesCertifiedCorrect") && Html.ViewData.ModelState["IsRolesCertifiedCorrect"].Errors.Count > 0,
                       ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsRolesCertifiedCorrect") && Html.ViewData.ModelState["IsRolesCertifiedCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsRolesCertifiedCorrect"].Errors[0].ErrorMessage : string.Empty,
                       Label1 = "Correct",
                       Label2 = "Incorrect"
                   })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Scope of certification----------------- *@
                    <h4 class="govuk-heading-s">Scope of certification</h4>
                    <p class="govuk-body">
                        The certificate contains a statement of conformity which details the scope of certification, including any recognised supplementary codes. If the service is scoped for supplementary codes, only right to work, right to rent or Disclosure and Barring Service are applicable.
                        if the service is scoped for supplementary codes:
                    </p>

                    <ul class="govuk-list govuk-list--bullet govuk-list--spaced">
                        <li>
                            the identity profiles against GPG 45 should be shown, where appropiate
                        </li>
                        <li>
                            the quality of protection and quality of authentication against GPG 44 should be shown, where appropriate
                        </li>
                    </ul>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                       PropertyName = "IsCertificationScopeCorrect",
                       Value = Model.IsCertificationScopeCorrect,
                       Legend = "Scope of certification",
                       HasError = Html.ViewData.ModelState.ContainsKey("IsCertificationScopeCorrect") && Html.ViewData.ModelState["IsCertificationScopeCorrect"].Errors.Count > 0,
                       ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsCertificationScopeCorrect") && Html.ViewData.ModelState["IsCertificationScopeCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsCertificationScopeCorrect"].Errors[0].ErrorMessage : string.Empty,
                       Label1 = "Correct",
                       Label2 = "Incorrect"
                   })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Summary of service----------------- *@
                    <h4 class="govuk-heading-s">Summary of service</h4>
                    <p class="govuk-body">
                        The certificate contains a statement of conformity which includes a summary of the service.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                       PropertyName = "IsServiceSummaryCorrect",
                       Value = Model.IsServiceSummaryCorrect,
                       Legend = "Summary of service",
                       HasError = Html.ViewData.ModelState.ContainsKey("IsServiceSummaryCorrect") && Html.ViewData.ModelState["IsServiceSummaryCorrect"].Errors.Count > 0,
                       ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsServiceSummaryCorrect") && Html.ViewData.ModelState["IsServiceSummaryCorrect"].Errors.Count > 0 ?
                      Html.ViewData.ModelState["IsServiceSummaryCorrect"].Errors[0].ErrorMessage : string.Empty,
                       Label1 = "Correct",
                       Label2 = "Incorrect"
                   })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------URL link to service----------------- *@
                    <h4 class="govuk-heading-s">URL link to service</h4>
                    <p class="govuk-body">
                        The certificate contains a statement of conformity which includes a URL link to a website providing access to the service. This URL link may be slightly different from the company website address.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                    {
                        PropertyName = "IsURLLinkToServiceCorrect",
                        Value = Model.IsURLLinkToServiceCorrect,
                        Legend = "URL link to service",
                         HasError = Html.ViewData.ModelState.ContainsKey("IsURLLinkToServiceCorrect") && Html.ViewData.ModelState["IsURLLinkToServiceCorrect"].Errors.Count > 0,
                         ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsURLLinkToServiceCorrect") && Html.ViewData.ModelState["IsURLLinkToServiceCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsURLLinkToServiceCorrect"].Errors[0].ErrorMessage : string.Empty,
                        Label1 = "Correct",
                        Label2 = "Incorrect"
                    })

                    <hr class="govuk-section-break govuk-section-break--m">
                    <h3 class="govuk-heading-m">Unique designation of services</h3>

                    @* --------------GPG44 quality assessment----------------- *@
                    <h4 class="govuk-heading-s">GPG 45 identity profiles</h4>
                    <p class="govuk-body">
                        The certificate includes details of the GPG 45 identity profiles assessed. If the provider has been certified
                        against supplementary codes, the profiles listed meet the certification scheme requirements.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                        PropertyName = "IsGPG45Correct",
                        Value = Model.IsGPG44Correct,
                        Legend = "GPG45 quality assessment",
                        HasError = Html.ViewData.ModelState.ContainsKey("IsGPG44Correct") && Html.ViewData.ModelState["IsGPG44Correct"].Errors.Count > 0,
                        ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsGPG44Correct") && Html.ViewData.ModelState["IsGPG44Correct"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsGPG44Correct"].Errors[0].ErrorMessage : string.Empty,
                        Label1 = "Correct",
                        Label2 = "Incorrect"
                   })

                    @* --------------GPG45 identity profiles----------------- *@
                    <h4 class="govuk-heading-s">GPG 44 quality assessment</h4>
                    <p class="govuk-body">
                        The certificate includes a description of the GPG 44 quality of authenticator and quality of protection assessed.
                        If the service is not scoped for GPG 44, this should be clearly stated or a 'not applicable' description provided on the certificate.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                        PropertyName = "IsGPG44Correct",
                        Value = Model.IsGPG45Correct,
                        Legend = "GPG44 quality assessment",
                        HasError = Html.ViewData.ModelState.ContainsKey("IsGPG45Correct") && Html.ViewData.ModelState["IsGPG45Correct"].Errors.Count > 0,
                        ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsGPG45Correct") && Html.ViewData.ModelState["IsGPG45Correct"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsGPG45Correct"].Errors[0].ErrorMessage : string.Empty,
                        Label1 = "Correct",
                        Label2 = "Incorrect"
                   })


                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Methods of service provision----------------- *@

                    <h4 class="govuk-heading-s">Methods of service provision</h4>
                    <p class="govuk-body">
                        The certificate includes methods of service provision, for example online, person-to-person, physical sites.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                    {
                    PropertyName = "IsServiceProvisionCorrect",
                    Value = Model.IsServiceProvisionCorrect,
                    Legend = "Methods of service provision",
                    HasError = Html.ViewData.ModelState.ContainsKey("IsServiceProvisionCorrect") && Html.ViewData.ModelState["IsServiceProvisionCorrect"].Errors.Count > 0,
                    ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsServiceProvisionCorrect") && Html.ViewData.ModelState["IsServiceProvisionCorrect"].Errors.Count > 0 ?
                    Html.ViewData.ModelState["IsServiceProvisionCorrect"].Errors[0].ErrorMessage : string.Empty,
                    Label1 = "Correct",
                    Label2 = "Incorrect"
                   })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Geographical location----------------- *@

                    <h4 class="govuk-heading-s">Geographical location</h4>
                    <p class="govuk-body">
                        The certificate includes the geographical location of service provision, if applicable.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                   {
                    PropertyName = "IsLocationCorrect",
                    Value = Model.IsLocationCorrect,
                    Legend = "Geographical location",
                    HasError = Html.ViewData.ModelState.ContainsKey("IsLocationCorrect") && Html.ViewData.ModelState["IsLocationCorrect"].Errors.Count > 0,
                    ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsLocationCorrect") && Html.ViewData.ModelState["IsLocationCorrect"].Errors.Count > 0 ?
                    Html.ViewData.ModelState["IsLocationCorrect"].Errors[0].ErrorMessage : string.Empty,
                    Label1 = "Correct",
                    Label2 = "Incorrect"
                    })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Date of issue----------------- *@

                    <h4 class="govuk-heading-s">Date of issue</h4>
                    <p class="govuk-body">
                        The certificate includes a valid date of issue. The issue date should not be in the future.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                    {
                        PropertyName = "IsDateOfIssueCorrect",
                        Value = Model.IsDateOfIssueCorrect,
                        Legend = "Date of issue",
                        HasError = Html.ViewData.ModelState.ContainsKey("IsDateOfIssueCorrect") && Html.ViewData.ModelState["IsDateOfIssueCorrect"].Errors.Count > 0,
                        ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsDateOfIssueCorrect") && Html.ViewData.ModelState["IsDateOfIssueCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsDateOfIssueCorrect"].Errors[0].ErrorMessage : string.Empty,
                        Label1 = "Correct",
                        Label2 = "Incorrect"
                    })

                    <hr class="govuk-section-break govuk-section-break--s">
                    @* --------------Date of expiry----------------- *@

                    <h4 class="govuk-heading-s">Date of expiry</h4>
                    <p class="govuk-body">
                        The certificate includes a valid date of expiry. The expiry date should not be more than 3 years and 60 days after the date of issue.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                    {
                    PropertyName = "IsDateOfExpiryCorrect",
                    Value = Model.IsDateOfExpiryCorrect,
                    Legend = "Date of expiry",
                    HasError = Html.ViewData.ModelState.ContainsKey("IsDateOfExpiryCorrect") && Html.ViewData.ModelState["IsDateOfExpiryCorrect"].Errors.Count > 0,
                    ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsDateOfExpiryCorrect") && Html.ViewData.ModelState["IsDateOfExpiryCorrect"].Errors.Count > 0 ?
                    Html.ViewData.ModelState["IsDateOfExpiryCorrect"].Errors[0].ErrorMessage : string.Empty,
                   Label1 = "Correct",
                   Label2 = "Incorrect"
                    })


                    <hr class="govuk-section-break govuk-section-break--s">
                    @* -------------Authenticity verification----------------- *@

                    <h4 class="govuk-heading-s">Authenticity verification</h4>
                    <p class="govuk-body">
                        The certificate includes means by which the authenticity of the certificate can be verified. This may be a URL link to the Conformity Assessment Body website where provider certificates are available for public viewing.
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_TwoRadioButtonGroupView.cshtml", new TwoRadioButtonGroupViewModel
                    {
                        PropertyName = "IsAuthenticyVerifiedCorrect",
                        Value = Model.IsAuthenticyVerifiedCorrect,
                        Legend = "Authenticity verification",
                        HasError = Html.ViewData.ModelState.ContainsKey("IsAuthenticyVerifiedCorrect") && Html.ViewData.ModelState["IsAuthenticyVerifiedCorrect"].Errors.Count > 0,
                        ErrorMessage = Html.ViewData.ModelState.ContainsKey("IsAuthenticyVerifiedCorrect") && Html.ViewData.ModelState["IsAuthenticyVerifiedCorrect"].Errors.Count > 0 ?
                        Html.ViewData.ModelState["IsAuthenticyVerifiedCorrect"].Errors[0].ErrorMessage : string.Empty,
                        Label1 = "Correct",
                        Label2 = "Incorrect"
                    })

                    <hr class="govuk-section-break govuk-section-break--l">
                    @*    ---------Comments and Save as draft ------- *@


                    @if (Html.ViewData.ModelState.ContainsKey("CommentsForIncorrect") && Html.ViewData.ModelState["CommentsForIncorrect"].Errors.Count > 0)
                    {
                        <div class="govuk-form-group govuk-form-group--error">
                            <h3 class="govuk-label-wrapper">
                                <label class="govuk-label govuk-label--s" for="commentsforincorrect">
                                    Record the reasons for your decision
                                </label>

                            </h3>
                           <div id="comments-hint" class="govuk-hint">
                              This information will only be visible to OfDIA users. If you have marked any item as 'Incorrect', you should provide further details. 
                           </div>
                            <p id="commentsforincorrect-error" class="govuk-error-message">
                                <span class="govuk-visually-hidden">Error:</span>  @Html.ValidationMessageFor(m => m.CommentsForIncorrect)
                            </p>
                            @Html.TextAreaFor(model => model.CommentsForIncorrect, new { @class = "govuk-textarea govuk-textarea--error", @id = "commentsforincorrect", @name = "comment", @rows = "5", aria_describedby = "comments-hint commentsforincorrect-error" })
                        </div>

                    }
                    else
                    {
                        <div class="govuk-form-group">
                            <h3 class="govuk-label-wrapper">
                                <label class="govuk-label govuk-label--s" for="commentsforincorrect">
                                    Record the reasons for your decision
                                </label>
                            </h3>
                            <div id="comments-hint" class="govuk-hint">
                                This information will only be visible to OfDIA users. If you have marked any item as 'Incorrect', you should provide further details.
                            </div>
                            @Html.TextAreaFor(model => model.CommentsForIncorrect, new { @class = "govuk-textarea", @id = "commentsforincorrect", @name = "comment", @rows = "5", aria_describedby = "comments-hint" })
                        </div>

                    }


                </div>




                <div class="govuk-grid-column-full">
                    @if (Model.Service.CertificateReview == null || (Model.Service.CertificateReview != null &&
                 Model.Service.CertificateReview.CertificateReviewStatus == CertificateReviewEnum.InReview))
                    {
                        <div class="govuk-button-group">
                            <button type="submit" class="govuk-button" data-module="govuk-button" name="saveReview" value="continue">
                                Continue
                            </button>
                            <button type="submit" class="govuk-button govuk-button--secondary" data-module="govuk-button" name="saveReview" value="draft">
                                Save as draft
                            </button>
                        </div>
                    }

                    <div class="govuk-warning-text">
                        <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                        <strong class="govuk-warning-text__text">
                            <span class="govuk-visually-hidden">Warning</span>
                            To continue to the next step, you must complete all sections.
                        </strong>
                    </div>
                </div>

            }


        </div>
    </main>

</div>