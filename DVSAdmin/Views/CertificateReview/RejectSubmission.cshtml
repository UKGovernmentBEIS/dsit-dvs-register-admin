@model CertficateRejectionViewModel
@using DVSAdmin.Extensions;
@using DVSAdmin.CommonUtility.Models.Enums;
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Reject submission";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}

<div class="govuk-width-container">
    @Html.ActionLink("Back", "CertificateReview", "CertificateReview", new { reviewId  = Model.CertificateReview.CertificateReviewId}, new { @class = "govuk-back-link" })
    <main id="main-content" class="govuk-main-wrapper" role="main">
        <div class="govuk-grid-row">

            <div class="govuk-grid-column-full">

                @if (ViewData.ModelState.ErrorCount > 0)
                {
                    ViewData["Title"] = "Error: " + ViewData["Title"];
                    @await Html.PartialAsync("~/Views/PartialViews/_ErrorSummaryView.cshtml", Model)
                }
            </div>

                @using (Html.BeginForm("SaveRejectSubmission", "CertificateReview", FormMethod.Post))
                {
                    string checkboxid = string.Empty;                  

                <div class="govuk-grid-column-full">
                    <h1 class="govuk-heading-xl">Reject submission</h1>
                    <p class="govuk-body">
                        You are about to reject the following submission:
                    </p>
                    <table class="govuk-table">
                        <thead class="govuk-table__head">
                            <tr class="govuk-table__row">
                                <th scope="col" class="govuk-table__header">Service provider </th>
                                <th scope="col" class="govuk-table__header">Service name</th>
                                <th scope="col" class="govuk-table__header">New application or reapplication</th>
                                <th scope="col" class="govuk-table__header">Submission date <br />(GMT)</th>
                                <th scope="col" class="govuk-table__header">Review status</th>
                                <th scope="col" class="govuk-table__header">Days left to complete checks</th>
                            </tr>
                        </thead>
                        <tbody class="govuk-table__body">
                            <tr class="govuk-table__row">

                                <td class="govuk-table__cell">@Model.CertificateValidation?.Service?.Provider.RegisteredName</td>
                                <td class="govuk-table__cell">@Model.CertificateValidation?.Service?.ServiceName</td>
                                <td class="govuk-table__cell">@Model.CertificateValidation?.Service?.NewOrResubmission</td>                            
                                <td class="govuk-table__cell"> @DateTimeExtensions.FormatDateTime(Model.CertificateValidation.Service.CreatedTime)</td>
                                @if (@Model.CertificateValidation.Service.CertificateReview == null)
                                {
                                    <td class="govuk-table__cell">@HtmlExtensions.ToStyledStrongTag(Model.CertificateValidation.Service.ServiceStatus)</td>
                                }
                                else
                                {
                                    <td class="govuk-table__cell">@HtmlExtensions.ToStyledStrongTag(Model.CertificateValidation.Service.CertificateReview.CertificateReviewStatus)</td>
                                }
                                <td class="govuk-table__cell">@Model.CertificateValidation.Service.DaysLeftToComplete  days</td>

                            </tr>
                        </tbody>
                    </table>

                    <h2 class="govuk-heading-l">What was rejected</h2>

                    <hr class="govuk-section-break govuk-section-break--visible">

                    @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_CertificateValidationFieldsView.cshtml",
                     new ReviewFiledsViewModel
                    {
                        CertificateValidation = Model.CertificateValidation,
                        InformationMatched = Model.CertificateReview.InformationMatched,
                        IsRejectFlow = true,
                        TextForIncorrectField = "Incorrect"
                     })

                </div>
                <div class="govuk-grid-column-two-thirds">
                    <h3 class="govuk-heading-m">Comments</h3>
                    <p class="govuk-body">
                        @HtmlExtensions.ToStringWithLineBreaks(Model?.CertificateValidation?.CommentsForIncorrect)
                    </p>
                    <p class="govuk-body">
                        @HtmlExtensions.ToStringWithLineBreaks(Model?.CertificateReview?.Comments)
                    </p>
                    <h2 class="govuk-heading-l">Rejection information to be sent to the Conformity Assessment Body</h2>
                    <p class="govuk-body">
                        You should now give details of the reasons for rejection to be sent by email to
                        the Conformity Assessment Body (CAB). Please select reasons from the 
                        below list which align with the rejection criteria shown above. You should also 
                        provide specific details and outline any action required in the text box below.
                    </p>
                </div>


                @if (Html.ViewData.ModelState.ContainsKey("SelectedRejectionReasonIds") && Html.ViewData.ModelState["SelectedRejectionReasonIds"].Errors.Count > 0)
                {
                    <div class="govuk-grid-column-full">
                        <div class="govuk-form-group govuk-form-group--error">
                            <fieldset class="govuk-fieldset">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                                    <h3 class="govuk-fieldset__heading">
                                        Select the reasons
                                    </h3>
                                </legend>
                                <p id="selectedrejectionreasonids-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.SelectedRejectionReasonIds, "", new { @class = "govuk-error-message" })
                                </p>
                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                                    @foreach (var reason in Model?.RejectionReasons)
                                    {
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input" type="checkbox" name="SelectedRejectionReasonIds" value="@reason.Id" aria-describedby="selectedrejectionreasonids-error" id="@("selectedrejectionreasonids"+checkboxid)"
                                                   @(Model.SelectedRejectionReasonIds.Contains(reason.Id) ? "checked" : "") />
                                            <label class="govuk-label govuk-checkboxes__label" for="@("selectedrejectionreasonids"+checkboxid)">@reason.Reason</label>
                                        </div>
                                        checkboxid = (reason.Id + 1).ToString();
                                    }
                                </div>
                            </fieldset>
                        </div>
                    </div>
                }
                else
                {
                    <div class="govuk-grid-column-three-quarters">
                        <div class="govuk-form-group">
                            <fieldset class="govuk-fieldset">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                                    <h3 class="govuk-fieldset__heading">
                                        Select the reasons
                                    </h3>
                                </legend>
                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">

                                    @foreach (var reason in Model.RejectionReasons)
                                    {
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input" type="checkbox" name="SelectedRejectionReasonIds" value="@reason.Id" id="@("selectedrejectionreasonids"+checkboxid)"
                                                   @(Model.SelectedRejectionReasonIds.Contains(reason.Id) ? "checked" : "") />
                                            <label class="govuk-label govuk-checkboxes__label" for="@("selectedrejectionreasonids"+checkboxid)">@reason.Reason</label>
                                        </div>
                                        checkboxid = (reason.Id + 1).ToString();

                                    }
                                </div>
                            </fieldset>
                        </div>
                    </div>
                }

                <div class="govuk-grid-column-two-thirds">
                    <p class="govuk-body">
                        Please use the textbox below to give further details on the reason for
                        rejection and any required amendments for re-submission. If you have 
                        selected 'Other', please specify details below.
                    </p>

                    <h3 class="govuk-heading-s"> Give further details on reasons selected and any required amendments</h3>
                    <div id="comments-hint" class="govuk-hint">
                        For example: 'UKDIATF logo is missing from the certificate. Please add
                        UKDIATF logo to the certificate.'
                    </div>

                    @if (Html.ViewData.ModelState.ContainsKey("Comments") && Html.ViewData.ModelState["Comments"].Errors.Count > 0)
                    {
                        <div class="govuk-form-group govuk-form-group--error">
                            <p class="govuk-body">If you had marked any item as Incorrect, you can use the textbox below to provide further details.</p>
                            <p id="comments-error" class="govuk-error-message">
                                <span class="govuk-visually-hidden">Error:</span>  @Html.ValidationMessageFor(m => m.Comments)
                            </p>
                            @Html.TextAreaFor(model => model.Comments, new { @class = "govuk-textarea govuk-textarea--error", @id = "comments", @name = "comment", @rows = "5" })
                        </div>
                    }
                    else
                    {
                        <div class="govuk-form-group">

                            @Html.TextAreaFor(model => model.Comments, new { @class = "govuk-textarea", @id = "comments", @name = "comment", @rows = "5" })
                        </div>

                    }
                    <div class="govuk-warning-text">
                        <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                        <strong class="govuk-warning-text__text">
                            <span class="govuk-visually-hidden">Warning</span>
                            The details provided above will also be included in the email sent to
                            the CAB.
                        </strong>
                    </div>
                    <h3 class="govuk-heading-m">Who will receive the decision notification</h3>
                    <hr class="govuk-section-break govuk-section-break--visible">
                    <dl class="govuk-summary-list">
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                Email address of
                                CAB
                            </dt>
                            <dd class="govuk-summary-list__value">
                                @Model.CertificateValidation.Service.CabUser.CabEmail
                            </dd>
                        </div>
                    </dl>
                    <div class="govuk-button-group">
                        <button type="submit" class="govuk-button govuk-button--warning" data-module="govuk-button" name="saveReview" value="proceed">
                            Proceed with rejection
                        </button>
                        <button type="submit" class="govuk-button govuk-button--secondary" data-module="govuk-button" name="saveReview" value="cancel">
                            Cancel
                        </button>
                    </div>
                </div>
                @Html.Hidden("RejectionReasons", JsonConvert.SerializeObject(Model.RejectionReasons))
            }
            </div>
        </main>
    </div>

