@model CertificateDetailsViewModel;
@using DVSAdmin.CommonUtility.Models.Enums
@using DVSAdmin.Extensions
@using DVSAdmin.Models.UI;
@{
    ViewData["Title"] = "Submission details";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
    ViewData["HidePublishStatus"] = true;// setting variable to hide status field in partial view
    var providerEmailsViewModel = new ProviderEmailsViewModel
            {
                Heading = "Provider contact information",
                ProviderContact = Model?.CertificateValidation?.Service?.Provider
            };

    string refererUrl = Convert.ToString(ViewBag.RefererUrl);
    
    var notificationBanner = new NotificationBannerViewModel
    {
        Title = "Important",
        NotificationContent = new List<NotificationContent> { new() { Heading = "This information has been submitted as part of a re-application or trust framework uplift for an existing service.",
            HtmlContent = "To see the original submission, go back to Completed."
        } }
    };
}

<div class="govuk-width-container">
    <div class="govuk-breadcrumbs">
        <ol class="govuk-breadcrumbs__list">
            <li class="govuk-breadcrumbs__list-item">
                @Html.ActionLink("Home", "LandingPage", "DigitalIdentity", null, new { @class = "govuk-breadcrumbs__link" })
            </li>
            <li class="govuk-breadcrumbs__list-item">
                <a href="@refererUrl" class="govuk-breadcrumbs__link">
                    Certificate review
                </a>
            </li>
        </ol>
    </div>
    <main id="main-content" class="govuk-main-wrapper" role="main">

        @if (Model?.CertificateValidation?.Service?.IsResubmission == true)
        {
            @await Html.PartialAsync("~/Views/PartialViews/_NotificationBanner.cshtml", notificationBanner)
        }
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">

                <h1 class="govuk-heading-xl">@ViewData["Title"]</h1>
                
                @if (Model?.CertificateValidation?.Service?.CertificateReview.CertificateReviewStatus == CertificateReviewEnum.Rejected)
                {
                    <details class="govuk-details">
                        <summary class="govuk-details__summary">
                            <span class="govuk-details__summary-text">
                                This submission has been rejected.
                            </span>
                        </summary>
                        <div class="govuk-details__text">
                            <p class="govuk-body">If you want to review other submissions, select the 'Go back to Completed' button.</p>
                            <p class="govuk-body">If you reject this submission by mistake, select 'Restore this submission' button to move this record to the Certificate Submissions tab.</p>
                        </div>
                    </details>
                }

                @if (Model?.CertificateValidation?.Service?.CertificateReview.CertificateReviewStatus == CertificateReviewEnum.AmendmentsRequired)
                {
                    <details class="govuk-details">
                        <summary class="govuk-details__summary">
                            <span class="govuk-details__summary-text">
                                This submission has been sent back to the Conformity Assessment Body
                            </span>
                        </summary>
                        <div class="govuk-details__text">
                            <p class="govuk-body">A resubmission request has been sent to the Conformity Assessment Body. The CAB will need to amend and resubmit the submission according to the review feedback from OfDIA.</p>
                            <p class="govuk-body">To review other submissions, select ‘Go back to certificate review’ button.</p>
                        </div>
                    </details>
                }
            </div>
            <div class="govuk-grid-column-full">
                @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_ServiceDetailsView.cshtml", Model?.CertificateValidation?.Service)

                @if (Model.CanResendOpeningLoopRequest)
                {
                    @using (Html.BeginForm("ResendOpeningLinkEmail", "CertificateReview", FormMethod.Post))
                    {
                        @Html.Hidden("serviceId", Model.CertificateValidation.ServiceId)
                        <div class="govuk-button-group govuk-!-margin-top-5 govuk-!-margin-bottom-5">
                            <h2 class="govuk-heading-l">Resend the provider an invitation to rejoin the register</h2>
                            <p class="govuk-body">The provider of this service has not responded to our request to start their application for it to appear on the register.</p>
                            <p class="govuk-body">Select the 'Resend email request' button to send another email with an updated link that the provider can use to start the application process.</p>
                            <button type="submit" class="govuk-button" data-module="govuk-button">
                                Resend request email
                            </button>
                        </div>
                    }
                }

                <div class="govuk-!-padding-bottom-6">
                    <h2 class="govuk-heading-l">Provided certificate of conformity</h2>
                    <p class="govuk-body-l">
                        @Model?.CertificateValidation?.Service?.FileName.
                    </p>
                    <p class="govuk-body">
                        <span class="govuk-hint">
                            PDF, @Model?.CertificateValidation?.Service?.FileSizeInKb KB, 1 page
                        </span>
                    </p>
                    <p class="govuk-body">
                        <span class="govuk-hint">
                            This file may not be suitable for users of assistive technology.
                        </span>
                    </p>
                    <a href="/certificate-review/download-certificate?key=@Model.CertificateValidation.Service.FileLink&filename=@Model.CertificateValidation.Service.FileName" role="button" draggable="false" class="govuk-button govuk-button--secondary" data-module="govuk-button" target="_blank">
                        Download certificate of conformity 
                    </a>
                </div>

                <div class="govuk-!-padding-bottom-6">
                    <h2 class="govuk-heading-l">Submitted information</h2>
                    @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_SubmittedInformationView.cshtml", Model?.CertificateValidation?.Service)



                    @if (@Model?.CertificateValidation?.Service.ServiceSupSchemeMapping != null && @Model?.CertificateValidation?.Service.ServiceSupSchemeMapping.Count > 0)
                    {
                        if ((@Model.CertificateValidation.Service.ServiceSupSchemeMapping.Any(mapping => mapping.SchemeGPG44Mapping != null && mapping.SchemeGPG44Mapping.Count > 0))
                        || (@Model.CertificateValidation.Service.ServiceSupSchemeMapping.Any(mapping => mapping.SchemeGPG45Mapping != null && mapping.SchemeGPG45Mapping.Count > 0)))
                        {
                         
                                <h3 class="govuk-heading-m">Supplementary codes</h3>
                                @await Html.PartialAsync("~/Views/PartialViews/_SchemeMappingView.cshtml", Model.CertificateValidation.Service)
                          
                        }
                    }

                    @if (Model?.CertificateValidation.Service.ServiceType == ServiceTypeEnum.WhiteLabelled)
                    {                       
                            @await Html.PartialAsync("~/Views/PartialViews/_UnderpinningServiceDetailsView.cshtml", Model.CertificateValidation.Service)                        
                    }



                    @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_ContactView.cshtml", Model?.CertificateValidation?.Service)
                </div>


                @if (Model?.CertificateValidation?.Service?.CertificateReview != null)
                {
                    if (Model?.CertificateValidation?.Service?.CertificateReview.CertificateReviewStatus == CertificateReviewEnum.Approved)
                    {
                        @await Html.PartialAsync("~/Views/PartialViews/_ProviderEmailsView.cshtml", providerEmailsViewModel)



                        <h2 class="govuk-heading-l">Review summary</h2>

                        <dl class="govuk-summary-list">
                            <div class="govuk-summary-list__row">
                                <dt class="govuk-summary-list__key">
                                    Certificate validation
                                </dt>
                                <dd class="govuk-summary-list__value">
                                    <strong class="govuk-tag govuk-tag--green">
                                        Approved
                                    </strong>
                                </dd>
                            </div>

                            <div class="govuk-summary-list__row">
                                <dt class="govuk-summary-list__key">
                                    Information match
                                </dt>
                                <dd class="govuk-summary-list__value">
                                    <strong class="govuk-tag govuk-tag--green">
                                        Yes, it matches the information on the certificate
                                    </strong>
                                </dd>
                            </div>
                        </dl>


                        <h3 class="govuk-heading-m">Comments</h3>
                        <p class="govuk-body">
                            @HtmlExtensions.ToStringWithLineBreaks(Model?.CertificateValidation?.CommentsForIncorrect ?? string.Empty)
                        </p>
                        <p class="govuk-body">
                            @HtmlExtensions.ToStringWithLineBreaks(Model?.CertificateReview?.Comments ?? string.Empty)
                        </p>
                        
                        <a href="/certificate-review/certificate-review-list#archive" class="govuk-button govuk-button--secondary" role="button" draggable="false" data-module="govuk-button">
                            Go back to completed
                        </a>


                    }
                    else if (Model?.CertificateValidation?.Service?.CertificateReview.CertificateReviewStatus == CertificateReviewEnum.Rejected)
                    {
                        @await Html.PartialAsync("~/Views/PartialViews/_ProviderEmailsView.cshtml", providerEmailsViewModel)

                        <h2 class="govuk-heading-l">What was rejected</h2>



                        @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_CertificateValidationFieldsView.cshtml",
                                 new ReviewFiledsViewModel
                                {
                                CertificateValidation = Model.CertficateRejection.CertificateValidation,
                                InformationMatched = Model.CertificateReview.InformationMatched,
                                IsRejectFlow = true,
                                TextForIncorrectField = "Incorrect"
                                })

                        <h3 class="govuk-heading-m">Comments</h3>
                        <p class="govuk-body">
                            @HtmlExtensions.ToStringWithLineBreaks(Model.CertificateValidation.CommentsForIncorrect)
                        </p>
                        <p class="govuk-body">
                            @HtmlExtensions.ToStringWithLineBreaks(Model.CertificateReview.Comments)
                        </p>
                        <p class="govuk-body">
                            @HtmlExtensions.ToStringWithLineBreaks(Model.CertficateRejection.Comments)
                        </p>

                        <hr class="govuk-section-break govuk-section-break--m">

                        <div class="govuk-warning-text">
                            <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                            <strong class="govuk-warning-text__text">
                                <span class="govuk-visually-hidden">Warning</span>
                                If you select 'Restore this submission' the submission will be removed from completed and moved to the certificate submissions tab
                            </strong>
                        </div>

                        <div class="govuk-button-group">
                            <a href="/certificate-review/restore-submission?reviewId=@Model.CertificateValidation.Service.CertificateReview.Id&serviceId=@Model.CertificateValidation.Service.Id" role="button" draggable="false" class="govuk-button" data-module="govuk-button">
                                Restore this submission
                            </a>
                            <a href="/certificate-review/certificate-review-list#archive" class="govuk-button govuk-button--secondary" role="button" draggable="false" data-module="govuk-button">
                                Go back to completed
                            </a>
                        </div>
                    }

                    else if (Model?.CertificateValidation?.Service?.CertificateReview.CertificateReviewStatus == CertificateReviewEnum.AmendmentsRequired)
                    {
                        <h2 class="govuk-heading-l">Information that was sent to the CAB</h2>

                        @await Html.PartialAsync("~/Views/CertificateReview/PartialViews/_CertificateValidationFieldsView.cshtml",
                                 new ReviewFiledsViewModel
                                {
                                    CertificateValidation = Model.CertficateRejection.CertificateValidation,
                                    InformationMatched = Model.CertificateReview.InformationMatched,
                                    IsRejectFlow = false,
                                    TextForIncorrectField = "Amendments needed",
                                    ReviewComments = Model.SendBackViewModel.Reason
                                })

                        <div class="govuk-!-padding-top-5 govuk-!-padding-bottom-9">
                            <h2 class="govuk-heading-l">Decision comments recorded by OfDIA</h2>
                            <p class="govuk-body">
                                @HtmlExtensions.ToStringWithLineBreaks(Model.CertificateReview.Comments)
                            </p>

                            <div class="govuk-button-group govuk-!-padding-top-5 govuk-!-padding-bottom-9">
                                <a href="/certificate-review/certificate-review-list" class="govuk-button" role="button" draggable="false" data-module="govuk-button">
                                    Go back to certificate review
                                </a>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </main>

</div>

